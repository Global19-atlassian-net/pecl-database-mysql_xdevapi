// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_datatypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysqlx_datatypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Mysqlx {
namespace Datatypes {

namespace {

const ::google::protobuf::Descriptor* Scalar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scalar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scalar_String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scalar_String_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Scalar_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_ObjectField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_ObjectField_reflection_ = NULL;
const ::google::protobuf::Descriptor* Array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Array_reflection_ = NULL;
const ::google::protobuf::Descriptor* Any_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Any_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Any_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto() {
  protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysqlx_datatypes.proto");
  GOOGLE_CHECK(file != NULL);
  Scalar_descriptor_ = file->message_type(0);
  static const int Scalar_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_signed_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_unsigned_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_opaque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, v_string_),
  };
  Scalar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scalar_descriptor_,
      Scalar::default_instance_,
      Scalar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scalar));
  Scalar_String_descriptor_ = Scalar_descriptor_->nested_type(0);
  static const int Scalar_String_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, collation_),
  };
  Scalar_String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scalar_String_descriptor_,
      Scalar_String::default_instance_,
      Scalar_String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar_String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scalar_String));
  Scalar_Type_descriptor_ = Scalar_descriptor_->enum_type(0);
  Object_descriptor_ = file->message_type(1);
  static const int Object_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, fld_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  Object_ObjectField_descriptor_ = Object_descriptor_->nested_type(0);
  static const int Object_ObjectField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, value_),
  };
  Object_ObjectField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_ObjectField_descriptor_,
      Object_ObjectField::default_instance_,
      Object_ObjectField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_ObjectField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object_ObjectField));
  Array_descriptor_ = file->message_type(2);
  static const int Array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, value_),
  };
  Array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Array_descriptor_,
      Array::default_instance_,
      Array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Array));
  Any_descriptor_ = file->message_type(3);
  static const int Any_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, array_),
  };
  Any_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Any_descriptor_,
      Any::default_instance_,
      Any_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Any));
  Any_Type_descriptor_ = Any_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysqlx_5fdatatypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scalar_descriptor_, &Scalar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scalar_String_descriptor_, &Scalar_String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_ObjectField_descriptor_, &Object_ObjectField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Array_descriptor_, &Array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Any_descriptor_, &Any::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto() {
  delete Scalar::default_instance_;
  delete Scalar_reflection_;
  delete Scalar_String::default_instance_;
  delete Scalar_String_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete Object_ObjectField::default_instance_;
  delete Object_ObjectField_reflection_;
  delete Array::default_instance_;
  delete Array_reflection_;
  delete Any::default_instance_;
  delete Any_reflection_;
}

void protobuf_AddDesc_mysqlx_5fdatatypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026mysqlx_datatypes.proto\022\020Mysqlx.Datatyp"
    "es\"\366\002\n\006Scalar\022+\n\004type\030\001 \002(\0162\035.Mysqlx.Dat"
    "atypes.Scalar.Type\022\024\n\014v_signed_int\030\002 \001(\022"
    "\022\026\n\016v_unsigned_int\030\003 \001(\004\022\020\n\010v_opaque\030\005 \001"
    "(\014\022\020\n\010v_double\030\006 \001(\001\022\017\n\007v_float\030\007 \001(\002\022\016\n"
    "\006v_bool\030\010 \001(\010\0221\n\010v_string\030\t \001(\0132\037.Mysqlx"
    ".Datatypes.Scalar.String\032*\n\006String\022\r\n\005va"
    "lue\030\001 \002(\014\022\021\n\tcollation\030\002 \001(\004\"m\n\004Type\022\n\n\006"
    "V_SINT\020\001\022\n\n\006V_UINT\020\002\022\n\n\006V_NULL\020\003\022\014\n\010V_OC"
    "TETS\020\004\022\014\n\010V_DOUBLE\020\005\022\013\n\007V_FLOAT\020\006\022\n\n\006V_B"
    "OOL\020\007\022\014\n\010V_STRING\020\010\"}\n\006Object\0221\n\003fld\030\001 \003"
    "(\0132$.Mysqlx.Datatypes.Object.ObjectField"
    "\032@\n\013ObjectField\022\013\n\003key\030\001 \002(\t\022$\n\005value\030\002 "
    "\002(\0132\025.Mysqlx.Datatypes.Any\"-\n\005Array\022$\n\005v"
    "alue\030\001 \003(\0132\025.Mysqlx.Datatypes.Any\"\323\001\n\003An"
    "y\022(\n\004type\030\001 \002(\0162\032.Mysqlx.Datatypes.Any.T"
    "ype\022(\n\006scalar\030\002 \001(\0132\030.Mysqlx.Datatypes.S"
    "calar\022%\n\003obj\030\003 \001(\0132\030.Mysqlx.Datatypes.Ob"
    "ject\022&\n\005array\030\004 \001(\0132\027.Mysqlx.Datatypes.A"
    "rray\")\n\004Type\022\n\n\006SCALAR\020\001\022\n\n\006OBJECT\020\002\022\t\n\005"
    "ARRAY\020\003B\036\n\034com.mysql.cj.mysqlx.protobuf", 839);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysqlx_datatypes.proto", &protobuf_RegisterTypes);
  Scalar::default_instance_ = new Scalar();
  Scalar_String::default_instance_ = new Scalar_String();
  Object::default_instance_ = new Object();
  Object_ObjectField::default_instance_ = new Object_ObjectField();
  Array::default_instance_ = new Array();
  Any::default_instance_ = new Any();
  Scalar::default_instance_->InitAsDefaultInstance();
  Scalar_String::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  Object_ObjectField::default_instance_->InitAsDefaultInstance();
  Array::default_instance_->InitAsDefaultInstance();
  Any::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysqlx_5fdatatypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysqlx_5fdatatypes_2eproto {
  StaticDescriptorInitializer_mysqlx_5fdatatypes_2eproto() {
    protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  }
} static_descriptor_initializer_mysqlx_5fdatatypes_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Scalar_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scalar_Type_descriptor_;
}
bool Scalar_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Scalar_Type Scalar::V_SINT;
const Scalar_Type Scalar::V_UINT;
const Scalar_Type Scalar::V_NULL;
const Scalar_Type Scalar::V_OCTETS;
const Scalar_Type Scalar::V_DOUBLE;
const Scalar_Type Scalar::V_FLOAT;
const Scalar_Type Scalar::V_BOOL;
const Scalar_Type Scalar::V_STRING;
const Scalar_Type Scalar::Type_MIN;
const Scalar_Type Scalar::Type_MAX;
const int Scalar::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Scalar_String::kValueFieldNumber;
const int Scalar_String::kCollationFieldNumber;
#endif  // !_MSC_VER

Scalar_String::Scalar_String()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scalar_String::InitAsDefaultInstance() {
}

Scalar_String::Scalar_String(const Scalar_String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scalar_String::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collation_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scalar_String::~Scalar_String() {
  SharedDtor();
}

void Scalar_String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Scalar_String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar_String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scalar_String_descriptor_;
}

const Scalar_String& Scalar_String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  return *default_instance_;
}

Scalar_String* Scalar_String::default_instance_ = NULL;

Scalar_String* Scalar_String::New() const {
  return new Scalar_String;
}

void Scalar_String::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    collation_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scalar_String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collation;
        break;
      }

      // optional uint64 collation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collation_)));
          set_has_collation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scalar_String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(), output);
  }

  // optional uint64 collation = 2;
  if (has_collation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->collation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scalar_String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // optional uint64 collation = 2;
  if (has_collation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->collation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scalar_String::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint64 collation = 2;
    if (has_collation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar_String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scalar_String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scalar_String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scalar_String::MergeFrom(const Scalar_String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_collation()) {
      set_collation(from.collation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scalar_String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar_String::CopyFrom(const Scalar_String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar_String::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Scalar_String::Swap(Scalar_String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(collation_, other->collation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scalar_String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scalar_String_descriptor_;
  metadata.reflection = Scalar_String_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Scalar::kTypeFieldNumber;
const int Scalar::kVSignedIntFieldNumber;
const int Scalar::kVUnsignedIntFieldNumber;
const int Scalar::kVOpaqueFieldNumber;
const int Scalar::kVDoubleFieldNumber;
const int Scalar::kVFloatFieldNumber;
const int Scalar::kVBoolFieldNumber;
const int Scalar::kVStringFieldNumber;
#endif  // !_MSC_VER

Scalar::Scalar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scalar::InitAsDefaultInstance() {
  v_string_ = const_cast< ::Mysqlx::Datatypes::Scalar_String*>(&::Mysqlx::Datatypes::Scalar_String::default_instance());
}

Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scalar::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  v_signed_int_ = GOOGLE_LONGLONG(0);
  v_unsigned_int_ = GOOGLE_ULONGLONG(0);
  v_opaque_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  v_double_ = 0;
  v_float_ = 0;
  v_bool_ = false;
  v_string_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scalar::~Scalar() {
  SharedDtor();
}

void Scalar::SharedDtor() {
  if (v_opaque_ != &::google::protobuf::internal::kEmptyString) {
    delete v_opaque_;
  }
  if (this != default_instance_) {
    delete v_string_;
  }
}

void Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scalar_descriptor_;
}

const Scalar& Scalar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  return *default_instance_;
}

Scalar* Scalar::default_instance_ = NULL;

Scalar* Scalar::New() const {
  return new Scalar;
}

void Scalar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    v_signed_int_ = GOOGLE_LONGLONG(0);
    v_unsigned_int_ = GOOGLE_ULONGLONG(0);
    if (has_v_opaque()) {
      if (v_opaque_ != &::google::protobuf::internal::kEmptyString) {
        v_opaque_->clear();
      }
    }
    v_double_ = 0;
    v_float_ = 0;
    v_bool_ = false;
    if (has_v_string()) {
      if (v_string_ != NULL) v_string_->::Mysqlx::Datatypes::Scalar_String::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Scalar.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Scalar_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Scalar_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_v_signed_int;
        break;
      }

      // optional sint64 v_signed_int = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_signed_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &v_signed_int_)));
          set_has_v_signed_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v_unsigned_int;
        break;
      }

      // optional uint64 v_unsigned_int = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_unsigned_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_unsigned_int_)));
          set_has_v_unsigned_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_v_opaque;
        break;
      }

      // optional bytes v_opaque = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_opaque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_opaque()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_v_double;
        break;
      }

      // optional double v_double = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_double_)));
          set_has_v_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_v_float;
        break;
      }

      // optional float v_float = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_float_)));
          set_has_v_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_v_bool;
        break;
      }

      // optional bool v_bool = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_bool_)));
          set_has_v_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_v_string;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional sint64 v_signed_int = 2;
  if (has_v_signed_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->v_signed_int(), output);
  }

  // optional uint64 v_unsigned_int = 3;
  if (has_v_unsigned_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->v_unsigned_int(), output);
  }

  // optional bytes v_opaque = 5;
  if (has_v_opaque()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->v_opaque(), output);
  }

  // optional double v_double = 6;
  if (has_v_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v_double(), output);
  }

  // optional float v_float = 7;
  if (has_v_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->v_float(), output);
  }

  // optional bool v_bool = 8;
  if (has_v_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->v_bool(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (has_v_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->v_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scalar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Mysqlx.Datatypes.Scalar.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional sint64 v_signed_int = 2;
  if (has_v_signed_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->v_signed_int(), target);
  }

  // optional uint64 v_unsigned_int = 3;
  if (has_v_unsigned_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->v_unsigned_int(), target);
  }

  // optional bytes v_opaque = 5;
  if (has_v_opaque()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->v_opaque(), target);
  }

  // optional double v_double = 6;
  if (has_v_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->v_double(), target);
  }

  // optional float v_float = 7;
  if (has_v_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->v_float(), target);
  }

  // optional bool v_bool = 8;
  if (has_v_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->v_bool(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
  if (has_v_string()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->v_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scalar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Datatypes.Scalar.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional sint64 v_signed_int = 2;
    if (has_v_signed_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->v_signed_int());
    }

    // optional uint64 v_unsigned_int = 3;
    if (has_v_unsigned_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v_unsigned_int());
    }

    // optional bytes v_opaque = 5;
    if (has_v_opaque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_opaque());
    }

    // optional double v_double = 6;
    if (has_v_double()) {
      total_size += 1 + 8;
    }

    // optional float v_float = 7;
    if (has_v_float()) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 8;
    if (has_v_bool()) {
      total_size += 1 + 1;
    }

    // optional .Mysqlx.Datatypes.Scalar.String v_string = 9;
    if (has_v_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scalar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scalar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_v_signed_int()) {
      set_v_signed_int(from.v_signed_int());
    }
    if (from.has_v_unsigned_int()) {
      set_v_unsigned_int(from.v_unsigned_int());
    }
    if (from.has_v_opaque()) {
      set_v_opaque(from.v_opaque());
    }
    if (from.has_v_double()) {
      set_v_double(from.v_double());
    }
    if (from.has_v_float()) {
      set_v_float(from.v_float());
    }
    if (from.has_v_bool()) {
      set_v_bool(from.v_bool());
    }
    if (from.has_v_string()) {
      mutable_v_string()->::Mysqlx::Datatypes::Scalar_String::MergeFrom(from.v_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scalar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_v_string()) {
    if (!this->v_string().IsInitialized()) return false;
  }
  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(v_signed_int_, other->v_signed_int_);
    std::swap(v_unsigned_int_, other->v_unsigned_int_);
    std::swap(v_opaque_, other->v_opaque_);
    std::swap(v_double_, other->v_double_);
    std::swap(v_float_, other->v_float_);
    std::swap(v_bool_, other->v_bool_);
    std::swap(v_string_, other->v_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scalar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scalar_descriptor_;
  metadata.reflection = Scalar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Object_ObjectField::kKeyFieldNumber;
const int Object_ObjectField::kValueFieldNumber;
#endif  // !_MSC_VER

Object_ObjectField::Object_ObjectField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Object_ObjectField::InitAsDefaultInstance() {
  value_ = const_cast< ::Mysqlx::Datatypes::Any*>(&::Mysqlx::Datatypes::Any::default_instance());
}

Object_ObjectField::Object_ObjectField(const Object_ObjectField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Object_ObjectField::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object_ObjectField::~Object_ObjectField() {
  SharedDtor();
}

void Object_ObjectField::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void Object_ObjectField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object_ObjectField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_ObjectField_descriptor_;
}

const Object_ObjectField& Object_ObjectField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  return *default_instance_;
}

Object_ObjectField* Object_ObjectField::default_instance_ = NULL;

Object_ObjectField* Object_ObjectField::New() const {
  return new Object_ObjectField;
}

void Object_ObjectField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::Mysqlx::Datatypes::Any::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object_ObjectField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .Mysqlx.Datatypes.Any value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Object_ObjectField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Object_ObjectField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .Mysqlx.Datatypes.Any value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Object_ObjectField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .Mysqlx.Datatypes.Any value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object_ObjectField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object_ObjectField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object_ObjectField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object_ObjectField::MergeFrom(const Object_ObjectField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::Mysqlx::Datatypes::Any::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object_ObjectField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_ObjectField::CopyFrom(const Object_ObjectField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_ObjectField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void Object_ObjectField::Swap(Object_ObjectField* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object_ObjectField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_ObjectField_descriptor_;
  metadata.reflection = Object_ObjectField_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Object::kFldFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  fld_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fld()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fld;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (int i = 0; i < this->fld_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fld(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  for (int i = 0; i < this->fld_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fld(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Datatypes.Object.ObjectField fld = 1;
  total_size += 1 * this->fld_size();
  for (int i = 0; i < this->fld_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fld(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  fld_.MergeFrom(from.fld_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  for (int i = 0; i < fld_size(); i++) {
    if (!this->fld(i).IsInitialized()) return false;
  }
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    fld_.Swap(&other->fld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Array::kValueFieldNumber;
#endif  // !_MSC_VER

Array::Array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Array::InitAsDefaultInstance() {
}

Array::Array(const Array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Array::~Array() {
  SharedDtor();
}

void Array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Array_descriptor_;
}

const Array& Array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  return *default_instance_;
}

Array* Array::default_instance_ = NULL;

Array* Array::New() const {
  return new Array;
}

void Array::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mysqlx.Datatypes.Any value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Mysqlx.Datatypes.Any value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Array::ByteSize() const {
  int total_size = 0;

  // repeated .Mysqlx.Datatypes.Any value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  return true;
}

void Array::Swap(Array* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Array_descriptor_;
  metadata.reflection = Array_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Any_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Any_Type_descriptor_;
}
bool Any_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Any_Type Any::SCALAR;
const Any_Type Any::OBJECT;
const Any_Type Any::ARRAY;
const Any_Type Any::Type_MIN;
const Any_Type Any::Type_MAX;
const int Any::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Any::kTypeFieldNumber;
const int Any::kScalarFieldNumber;
const int Any::kObjFieldNumber;
const int Any::kArrayFieldNumber;
#endif  // !_MSC_VER

Any::Any()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Any::InitAsDefaultInstance() {
  scalar_ = const_cast< ::Mysqlx::Datatypes::Scalar*>(&::Mysqlx::Datatypes::Scalar::default_instance());
  obj_ = const_cast< ::Mysqlx::Datatypes::Object*>(&::Mysqlx::Datatypes::Object::default_instance());
  array_ = const_cast< ::Mysqlx::Datatypes::Array*>(&::Mysqlx::Datatypes::Array::default_instance());
}

Any::Any(const Any& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Any::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  scalar_ = NULL;
  obj_ = NULL;
  array_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Any::~Any() {
  SharedDtor();
}

void Any::SharedDtor() {
  if (this != default_instance_) {
    delete scalar_;
    delete obj_;
    delete array_;
  }
}

void Any::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Any::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Any_descriptor_;
}

const Any& Any::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysqlx_5fdatatypes_2eproto();
  return *default_instance_;
}

Any* Any::default_instance_ = NULL;

Any* Any::New() const {
  return new Any;
}

void Any::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_scalar()) {
      if (scalar_ != NULL) scalar_->::Mysqlx::Datatypes::Scalar::Clear();
    }
    if (has_obj()) {
      if (obj_ != NULL) obj_->::Mysqlx::Datatypes::Object::Clear();
    }
    if (has_array()) {
      if (array_ != NULL) array_->::Mysqlx::Datatypes::Array::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Any::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Mysqlx.Datatypes.Any.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Mysqlx::Datatypes::Any_Type_IsValid(value)) {
            set_type(static_cast< ::Mysqlx::Datatypes::Any_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scalar;
        break;
      }

      // optional .Mysqlx.Datatypes.Scalar scalar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obj;
        break;
      }

      // optional .Mysqlx.Datatypes.Object obj = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_array;
        break;
      }

      // optional .Mysqlx.Datatypes.Array array = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Any::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scalar(), output);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obj(), output);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (has_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->array(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Any::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Mysqlx.Datatypes.Any.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Mysqlx.Datatypes.Scalar scalar = 2;
  if (has_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scalar(), target);
  }

  // optional .Mysqlx.Datatypes.Object obj = 3;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obj(), target);
  }

  // optional .Mysqlx.Datatypes.Array array = 4;
  if (has_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->array(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Any::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Mysqlx.Datatypes.Any.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Mysqlx.Datatypes.Scalar scalar = 2;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar());
    }

    // optional .Mysqlx.Datatypes.Object obj = 3;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obj());
    }

    // optional .Mysqlx.Datatypes.Array array = 4;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Any::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Any* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Any*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Any::MergeFrom(const Any& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scalar()) {
      mutable_scalar()->::Mysqlx::Datatypes::Scalar::MergeFrom(from.scalar());
    }
    if (from.has_obj()) {
      mutable_obj()->::Mysqlx::Datatypes::Object::MergeFrom(from.obj());
    }
    if (from.has_array()) {
      mutable_array()->::Mysqlx::Datatypes::Array::MergeFrom(from.array());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Any::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Any::CopyFrom(const Any& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scalar()) {
    if (!this->scalar().IsInitialized()) return false;
  }
  if (has_obj()) {
    if (!this->obj().IsInitialized()) return false;
  }
  if (has_array()) {
    if (!this->array().IsInitialized()) return false;
  }
  return true;
}

void Any::Swap(Any* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(obj_, other->obj_);
    std::swap(array_, other->array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Any::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Any_descriptor_;
  metadata.reflection = Any_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Datatypes
}  // namespace Mysqlx

// @@protoc_insertion_point(global_scope)
